var u=Object.defineProperty;var h=(o,e,s)=>e in o?u(o,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):o[e]=s;var n=(o,e,s)=>(h(o,typeof e!="symbol"?e+"":e,s),s),d=(o,e,s)=>{if(!e.has(o))throw TypeError("Cannot "+s)};var i=(o,e,s)=>{if(e.has(o))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(o):e.set(o,s)},l=(o,e,s,g)=>(d(o,e,"write to private field"),g?g.call(o,s):e.set(o,s),s);var a=(o,e,s)=>(d(o,e,"access private method"),s);const r=function(){};var t,c,b;class w{constructor(e=!0){i(this,c);i(this,t,!0);n(this,"trace",r);n(this,"debug",r);n(this,"vdebug",r);n(this,"log",r);n(this,"warn",r);n(this,"error",r);l(this,t,e),typeof console.log>"u"&&(console.log=function(){}),a(this,c,b).call(this,e)}setDebug(e=!0){l(this,t,e),a(this,c,b).call(this,e)}}t=new WeakMap,c=new WeakSet,b=function(e=!0){if(e===!0||e==="all")this.trace=console.trace.bind(console),this.debug=console.debug.bind(console),this.vdebug=console.debug.bind(console),this.log=console.log.bind(console),this.warn=console.warn.bind(console),this.error=console.error.bind(console);else if(Array.isArray(e))for(var s of e)switch(s){case"trace":this.trace=console.trace.bind(console);break;case"debug":this.debug=console.debug.bind(console);break;case"vdebug":this.vdebug=console.debug.bind(console);break;case"log":this.log=console.log.bind(console);break;case"warn":this.warn=console.warn.bind(console);break;case"error":this.error=console.error.bind(console);break;default:console.error("Unknown debugging option '"+s+"' (supported: 'trace', 'debug', 'vdebug', 'log', warn', 'error')");break}else this.trace=r,this.debug=r,this.vdebug=r,this.log=r,this.warn=r,this.error=r};export{w as L};
